"""
UI Router module for Healthcare GraphRAG system.

This module provides a Streamlit-based web interface for the Healthcare GraphRAG system,
enabling interactive chat with memory management, conversation history visualization,
and topic extraction from healthcare conversations.
"""
import os
import uuid
import asyncio

import nest_asyncio
import streamlit as st
from langchain_core.messages import HumanMessage, SystemMessage

from src.helpers.agent_initializer import agent_initializer
from src.helpers.logging_config import logger
from src.helpers.prompts import get_healthcare_system_prompt
from src.handlers.conversation_handler import (
    store_conversation,
    get_conversation_history,
    get_all_conversations,
    delete_conversation
)


def generate_conversation_name(messages):
    """
    Create a readable name for a conversation based on first user message.

    Args:
        messages: List of message dictionaries with role and content

    Returns:
        String containing a human-readable conversation name
    """
    if not messages:
        return "Cu·ªôc h·ªôi tho·∫°i m·ªõi"

    # L·∫•y tin nh·∫Øn ƒë·∫ßu ti√™n c·ªßa user
    for message in messages:
        if message["role"] == "user":
            content = message["content"]
            # C·∫Øt n·ªôi dung ƒë·ªÉ t·∫°o t√™n ng·∫Øn g·ªçn
            words = content.split()[:4]  # L·∫•y t·ªëi ƒëa 4 t·ª´ ƒë·∫ßu
            name = " ".join(words)
            if len(name) > 30:
                name = name[:27] + "..."
            return name

    return "Cu·ªôc h·ªôi tho·∫°i m·ªõi"


def render_conversation_selector():
    """
    Render the conversation selector UI component.

    Returns:
        Boolean: True if UI state changed and rerun is needed
    """
    st.subheader("Ch·ªçn ho·∫∑c t·∫°o cu·ªôc h·ªôi tho·∫°i")
    conversation_options = []
    conversation_map = {}  # Map UUID to friendly name

    # Generate friendly names for all conversations
    for thread_id in st.session_state.conversations:
        history = get_conversation_history(thread_id)
        friendly_name = generate_conversation_name(history)
        # Th√™m UUID ·ªü cu·ªëi ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng tr√πng l·∫∑p
        display_name = f"{friendly_name} ({thread_id[:6]})"
        conversation_options.append(display_name)
        conversation_map[display_name] = thread_id

    # Add option to create new conversation
    conversation_options.append("T·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi")

    selected_option = st.selectbox(
        "Ch·ªçn cu·ªôc h·ªôi tho·∫°i:", conversation_options)

    if selected_option == "T·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi":
        new_thread_id = str(uuid.uuid4())
        st.session_state.conversations.append(new_thread_id)
        st.session_state.current_thread_id = new_thread_id
        st.session_state.messages = []
        # Update URL with new thread_id
        st.query_params.update(thread_id=new_thread_id)
        return True
    else:
        selected_thread_id = conversation_map[selected_option]
        if st.session_state.current_thread_id != selected_thread_id:
            st.session_state.current_thread_id = selected_thread_id
            st.session_state.messages = get_conversation_history(
                selected_thread_id)
            # Update URL with selected thread_id
            st.query_params.update(thread_id=selected_thread_id)
            return True

    return False


def process_user_input(agent_executor, user_input):
    """
    Process user input and generate response using the agent.

    Args:
        agent_executor: The LangGraph agent instance
        user_input: User's question string
    """
    if not user_input:
        return

    st.session_state.messages.append(
        {"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.write(user_input)

    try:
        with st.spinner('ƒêang x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n...'):
            # L·∫•y context ƒë·∫ßy ƒë·ªß t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i
            conversation_context = agent_initializer.get_conversation_context(
                st.session_state.current_thread_id)

            # S·ª≠ d·ª•ng prompt chung
            system_content = get_healthcare_system_prompt(conversation_context)
            system_message = SystemMessage(content=system_content)

            config = {"configurable": {
                "thread_id": st.session_state.current_thread_id}}
            response = agent_executor.invoke(
                {"messages": [system_message,
                              HumanMessage(content=user_input)]},
                config
            )["messages"][-1].content

        st.session_state.messages.append(
            {"role": "assistant", "content": response})
        with st.chat_message("assistant"):
            st.write(response)

        # Save to Neo4j
        store_conversation(
            st.session_state.current_thread_id, user_input, response)
    except Exception as e:  # pylint: disable=broad-exception-caught
        # Exceptions need to be caught broadly as this is a top-level UI handler
        logger.error("Error processing question: %s", str(e), exc_info=True)
        st.error(
            f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}. Vui l√≤ng th·ª≠ l·∫°i.")


def render_memory_tab():
    """Render the Memory tab displaying conversation context and topics."""
    st.subheader("B·ªô nh·ªõ h·ªôi tho·∫°i")
    if st.session_state.current_thread_id:
        memory = agent_initializer.get_memory(
            st.session_state.current_thread_id)
        context = memory.get_conversation_context()

        st.markdown("### L·ªãch s·ª≠ h·ªôi tho·∫°i")
        st.text_area("N·ªôi dung h·ªôi tho·∫°i", value=context.get("conversation", ""),
                     height=300, disabled=True)

        st.markdown("### Ch·ªß ƒë·ªÅ ch√≠nh")
        if "topics" in context and context["topics"]:
            for topic in context["topics"]:
                st.markdown(f"- {topic}")
        else:
            st.write("Ch∆∞a c√≥ ch·ªß ƒë·ªÅ n√†o ƒë∆∞·ª£c nh·∫≠n di·ªán.")
    else:
        st.info(
            "Vui l√≤ng ch·ªçn ho·∫∑c t·∫°o m·ªôt cu·ªôc h·ªôi tho·∫°i ƒë·ªÉ xem th√¥ng tin b·ªô nh·ªõ.")


def render_conversations_tab():
    """Render the Conversations tab displaying all conversation history."""
    st.subheader("Danh s√°ch c√°c cu·ªôc h·ªôi tho·∫°i")
    if st.session_state.conversations:
        for thread_id in st.session_state.conversations:
            history = get_conversation_history(thread_id)
            friendly_name = generate_conversation_name(history)

            # T·∫°o container c√≥ vi·ªÅn v√† padding
            with st.container():
                st.markdown(f"### {friendly_name}")
                st.caption(f"ID: {thread_id}")

                if history:
                    # Ch·ªâ hi·ªÉn th·ªã 2-3 tin nh·∫Øn ƒë·∫ßu
                    for msg_idx, msg in enumerate(history[:3]):
                        st.write(
                            f"{msg['role'].capitalize()}: {msg['content'][:50]}...")
                    if len(history) > 3:
                        st.caption(
                            f"... v√† {len(history)-3} tin nh·∫Øn kh√°c")
                else:
                    st.write(
                        "Kh√¥ng c√≥ l·ªãch s·ª≠ cho cu·ªôc h·ªôi tho·∫°i n√†y.")
                st.markdown("---")
    else:
        st.write("Ch∆∞a c√≥ cu·ªôc h·ªôi tho·∫°i n√†o.")


def main():
    """Main Streamlit application."""
    # C·∫•u h√¨nh ƒë·ªông cho ti√™u ƒë·ªÅ trang d·ª±a tr√™n thread_id hi·ªán t·∫°i
    thread_id_display = "New Chat"
    query_params = st.query_params
    if "thread_id" in query_params:
        thread_id = query_params["thread_id"]
        if "current_thread_id" not in st.session_state or st.session_state.current_thread_id != thread_id:
            st.session_state.current_thread_id = thread_id
            st.session_state.messages = get_conversation_history(thread_id)

    if "current_thread_id" in st.session_state and st.session_state.current_thread_id:
        thread_id_display = f"Thread: {st.session_state.current_thread_id[:8]}..."

    st.set_page_config(
        page_title=f"Healthcare GraphRAG - {thread_id_display}",
        page_icon="üè•",
        layout="wide"
    )
    # Enable nested event loops for asyncio
    nest_asyncio.apply()
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    st.title("Healthcare Assistant with GraphRAG")
    st.write(
        "H·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ s·ª©c kh·ªèe ho·∫∑c b·ªánh nh√¢n! (H·ªó tr·ª£ ti·∫øng Vi·ªát v√† ti·∫øng Anh)")

    # Custom CSS for the chat input
    st.markdown(
        """
        <style>
        .stChatInput {
            position: sticky;
            bottom: 0;
            z-index: 100;
            background-color: #1e1e2f;
            padding: 10px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    try:
        required_vars = ["NEO4J_URI", "NEO4J_USERNAME",
                         "NEO4J_PASSWORD", "GITHUB_TOKEN"]
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        if missing_vars:
            st.error(
                f"Missing environment variables: {', '.join(missing_vars)}")
            return

        # Initialize agent
        agent_executor = agent_initializer.get_agent()

        # Initialize session state
        if "conversations" not in st.session_state:
            st.session_state.conversations = get_all_conversations()
        if "current_thread_id" not in st.session_state:
            st.session_state.current_thread_id = None
        if "messages" not in st.session_state:
            st.session_state.messages = []

        # Create tabs
        tab1, tab2, tab3 = st.tabs(["Chat", "Memory", "Conversations"])

        # Tab Chat
        with tab1:
            # Render conversation selector and check if rerun is needed
            if render_conversation_selector():
                st.rerun()

            # Add scroll button
            if st.button("Cu·ªôn xu·ªëng ƒë·ªÉ nh·∫≠p c√¢u h·ªèi"):
                st.rerun()

            # Chat input
            user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")
            process_user_input(agent_executor, user_input)

            # Delete conversation button
            if st.button("X√≥a l·ªãch s·ª≠ cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i"):
                try:
                    if delete_conversation(st.session_state.current_thread_id):
                        # N·∫øu x√≥a th√†nh c√¥ng, c·∫≠p nh·∫≠t UI
                        st.session_state.conversations.remove(
                            st.session_state.current_thread_id)
                        st.session_state.current_thread_id = None
                        st.session_state.messages = []
                        st.rerun()
                    else:
                        st.error(
                            "Kh√¥ng th·ªÉ x√≥a cu·ªôc h·ªôi tho·∫°i. Xem log ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")
                except Exception as e:  # pylint: disable=broad-exception-caught
                    logger.error(
                        "Error when deleting conversation: %s", str(e))
                    st.error(f"ƒê√£ x·∫£y ra l·ªói khi x√≥a l·ªãch s·ª≠: {str(e)}.")

        # Tab Memory
        with tab2:
            render_memory_tab()

        # Tab Conversations
        with tab3:
            render_conversations_tab()

    except ValueError as e:
        logger.error("Startup failed: %s", str(e))
        st.error(f"Error: {str(e)}")
    except Exception as e:  # pylint: disable=broad-exception-caught
        # This is the top-level error handler
        logger.error("Unexpected error: %s", str(e), exc_info=True)
        st.error(f"Error: {str(e)}")


def run_ui():
    """Run the Streamlit UI."""
    main()


if __name__ == "__main__":
    run_ui()
